#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct Node
{
    char data;
    struct Node *next;
}*top=NULL;

void display(struct Node *p)
{
    p=top;
    while(p)
    {
        printf("%d\t",p->data);
        p=p->next;
    }
}
void push(char element)
{
     struct Node *t;
     t=(struct Node*)malloc(sizeof(struct Node));
     if(t==NULL){printf("\nStack Overflow\n");}
  else if(t!=NULL)
  {


      t->data=element;
      t->next=top;
      top=t;
  }

}
char pop()
{
    struct Node *t;
    char x;
    if(top==NULL)
        printf("\nStack Underflow\n");
    else
    {
        t=top;
        top=top->next;
        x=t->data;
        free(t);
    }
    return x;

}
char peak(int pos)
{
    struct Node *t;
    char x;
    int i;
    t=top;
    for(i=0;i<pos-1;i++)
    {
        top=top->next;
    }
    x=top->data;
    top=t;
    return x;
}
int isBalanced(char *exp)
{

    int i;
    for(i=0;exp[i]!='\0';i++)
    {
        if(exp[i]=='(')
        {

            push(exp[i]);
        }
        else if(exp[i]==')')
        {
            if(top==NULL){return 0;}
            pop();
        }
    }
        if(top==NULL){return 1; }
        else{return 0;}

}
char stackTop()
{
    char x;
    if(top!=NULL)
    {
        x=top->data;
    }
    return x;
}
int isEmpty()
{
    if(top==NULL)
        return 1;
    else
        return 0;
}
int isOperand(char x)
{
    if(x=='+'||x=='-'||x=='*'||x=='/')
        return 0;
    else
        return 1;
}
int pre(char x)
{
    if(x=='+'||x=='-')
      return 1;
    else if(x=='*'||x=='/')
        return 2;
        return 0;
}
char* InfixToPostFix(char *infix)
{
    int i=0,j=0;
    int len;
    len=strlen(infix);
    char *postfix;
    postfix=(char*)malloc((len+1)*sizeof(char));
    while(infix[i]!='\0')
    {
        if(isOperand(infix[i]))
            postfix[j++]=infix[i++];
        else
        {
            if((pre(infix[i]))>pre(stackTop()))
            push(infix[i++]);
            else
            {
                postfix[j++]=pop();
            }

    }
    }
    while(top!=NULL)
    {
        postfix[j++]=pop();
    }
    postfix[j]='\0';
    return postfix;
}
int EvaluationPostFix(char *postfix)
{
    int i,x1,x2,result=0;
    for(i=0;postfix[i]!='\0';i++)
    {
        if(isOperand(postfix[i]))
            push(postfix[i]-'0');
        else
        {
            x2=pop();
            x1=pop();
            switch(postfix[i])
            {
                case '+':
                result=x1+x2;
                  push(result);
                break;
                case '-':result=x1-x2;
                    push(result);
                break;
                case'*':result=x1*x2;
                  push(result);
                break;
                case '/':result=x1/x2;
                 push(result);
                break;
            }




        }
    }

    return top->data;
}
int main()
{


  char *postfix="234*+82/-";
  printf("Result is %d\n",EvaluationPostFix(postfix));


    return 0;
}
